{"remainingRequest":"/Users/sanxun/Downloads/cxc_bsc/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sanxun/Downloads/cxc_bsc/node_modules/vue2-verify/src/components/Verify/VerifyCode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sanxun/Downloads/cxc_bsc/node_modules/vue2-verify/src/components/Verify/VerifyCode.vue","mtime":1646118464908},{"path":"/Users/sanxun/Downloads/cxc_bsc/node_modules/cache-loader/dist/cjs.js","mtime":1644989844798},{"path":"/Users/sanxun/Downloads/cxc_bsc/node_modules/babel-loader/lib/index.js","mtime":1644989844828},{"path":"/Users/sanxun/Downloads/cxc_bsc/node_modules/cache-loader/dist/cjs.js","mtime":1644989844798},{"path":"/Users/sanxun/Downloads/cxc_bsc/node_modules/vue-loader/lib/index.js","mtime":1644989857412}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qKgogKiBDb2RlCiAqIEBkZXNjcmlwdGlvbiDluLjop4TnmoTlm77niYfmloflrZfor4bliKvmiJbogIXmlbDlrZforqHnrpcKICogKi8KaW1wb3J0IHtfY29kZV9jaGFycywgX2NvZGVfY29sb3IxLCBfY29kZV9jb2xvcjJ9IGZyb20gJy4uLy4uL2xpYi91dGlsJwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ1ZlcmlmeUNvZGUnLAogICAgcHJvcHM6IHsKICAgICAgICB0eXBlOiB7CiAgICAgICAgICAgIHR5cGU6IFN0cmluZywKICAgICAgICAgICAgZGVmYXVsdDogJzEnCiAgICAgICAgfSwKICAgICAgICAvL+S9jeaVsO+8jOS7heWcqHR5cGU9MuaXtueUn+aViAogICAgICAgIGZpZ3VyZTogewogICAgICAgICAgICB0eXBlOiBOdW1iZXIsCiAgICAgICAgICAgIGRlZmF1bHQ6IDEwMAogICAgICAgIH0sCiAgICAgICAgLy/nrpfms5XvvIzmlK/mjIHliqDlh4/kuZjvvIww5Li66ZqP5py677yM5LuF5ZyodHlwZT0y5pe255Sf5pWICiAgICAgICAgYXJpdGg6IHsKICAgICAgICAgICAgdHlwZTogTnVtYmVyLAogICAgICAgICAgICBkZWZhdWx0OiAwCiAgICAgICAgfSwKICAgICAgICB3aWR0aDogewogICAgICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgICAgIGRlZmF1bHQ6ICcyMDBweCcKICAgICAgICB9LAogICAgICAgIGhlaWdodDogewogICAgICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgICAgIGRlZmF1bHQ6ICc2MHB4JwogICAgICAgIH0sCiAgICAgICAgZm9udFNpemU6IHsKICAgICAgICAgICAgdHlwZTogU3RyaW5nLAogICAgICAgICAgICBkZWZhdWx0OiAnMzBweCcKICAgICAgICB9LAogICAgICAgIGNvZGVMZW5ndGg6IHsKICAgICAgICAgICAgdHlwZTogTnVtYmVyLAogICAgICAgICAgICBkZWZhdWx0OiA2CiAgICAgICAgfQogICAgfSwKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaXNFbmQ6IGZhbHNlLAogICAgICAgICAgICAvLyDovpPlhaXnmoTlgLwKICAgICAgICAgICAgaW5wdXRWYWx1ZTogJycsCiAgICAgICAgICAgIC8vIOminOiJsgogICAgICAgICAgICBjb250YWluZXJCYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJywKICAgICAgICAgICAgY29udGFpbmVyQ29sb3I6ICcjZmZmJywKCiAgICAgICAgICAgIGNvZGVDaG9zZTogJycsIC8vIOW6lOivpei+k+WFpeeahGNvZGUKICAgICAgICAgICAgY29kZVNob3c6IFtdIC8vIOaYvuekuueUqOeahAogICAgICAgIH0KICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgaW5pdCgpIHsKICAgICAgICAgICAgdGhpcy5zZXRDb2RlKCkKCiAgICAgICAgICAgIHRoaXMuJHBhcmVudC4kZW1pdCgncmVhZHknLCB0aGlzKQogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIHNldENvZGUKICAgICAgICAgKiBAZGVzY3JpcHRpb24g6K6+572u6aqM6K+B56CBCiAgICAgICAgICogKi8KICAgICAgICBzZXRDb2RlKCkgewogICAgICAgICAgICBpZiAodGhpcy5pc0VuZCA9PSBmYWxzZSkgewoKICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyQmFja2dyb3VuZENvbG9yID0gX2NvZGVfY29sb3IxW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMpXQogICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJDb2xvciA9IF9jb2RlX2NvbG9yMltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1KV0KCiAgICAgICAgICAgICAgICB0aGlzLmlucHV0VmFsdWUgPSAnJwoKICAgICAgICAgICAgICAgIHRoaXMuY29kZVNob3cgPSBbXQogICAgICAgICAgICAgICAgdGhpcy5jb2RlQ2hvc2UgPSAnJwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICcxJykgewkJLy/mma7pgJrpqozor4HnoIEg5Zu+54mH6YCJ5oupCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvZGVMZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhck51bSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUyKQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wU3R5bGUgPSAoY2hhck51bSAlIDIgPT0gMCkgPyAiZm9udC1zdHlsZTppdGFsaWM7bWFyZ2luLXJpZ2h0OiAxMHB4IiA6ICJmb250LXdlaWdodDpib2xkZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFN0eWxlICs9IChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKSA9PSAxKSA/ICJmb250LXdlaWdodDpib2xkZXIiIDogIiIKCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29kZUNob3NlICs9IF9jb2RlX2NoYXJzW2NoYXJOdW1dCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29kZVNob3cucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogdG1wU3R5bGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyOiBfY29kZV9jaGFyc1tjaGFyTnVtXQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSAnMicpIHsKICAgICAgICAgICAgICAgICAgICAvLyDnrpfms5Xpqozor4HnoIEKICAgICAgICAgICAgICAgICAgICB2YXIgbnVtMSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuZmlndXJlKQogICAgICAgICAgICAgICAgICAgIHZhciBudW0yID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5maWd1cmUpCgogICAgICAgICAgICAgICAgICAgIGxldCBjb2RlU2hvdyA9ICcnCgogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFyaXRoID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcGFyaXRoID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMykKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodG1wYXJpdGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29kZUNob3NlID0gcGFyc2VJbnQobnVtMSkgKyBwYXJzZUludChudW0yKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVNob3cgPSBudW0xICsgJyArICcgKyBudW0yICsgJyA9ID8nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KG51bTEpIDwgcGFyc2VJbnQobnVtMikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wbnVtID0gbnVtMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bTEgPSBudW0yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtMiA9IHRtcG51bQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2RlQ2hvc2UgPSBwYXJzZUludChudW0xKSAtIHBhcnNlSW50KG51bTIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU2hvdyA9IG51bTEgKyAnIC0gJyArIG51bTIgKyAnID0gPycKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2RlQ2hvc2UgPSBwYXJzZUludChudW0xKSAqIHBhcnNlSW50KG51bTIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlU2hvdyA9IG51bTEgKyAnIMOXICcgKyBudW0yICsgJyA9ID8nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2RlU2hvdyA9IGNvZGVTaG93LnNwbGl0KCcnKSAvLyDovazmlbDnu4QKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLyoqCiAgICAgICAgICogY2hlY2tDb2RlCiAgICAgICAgICogQGRlc2NyaXB0aW9uIOmqjOivgemqjOivgeeggQogICAgICAgICAqICovCiAgICAgICAgY2hlY2tDb2RlKCkgewogICAgICAgICAgICBsZXQgaW5wdXRWYWx1ZQogICAgICAgICAgICBsZXQgY29kZUNob3NlCiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICcxJykgewkJLy/mma7pgJrpqozor4HnoIEKICAgICAgICAgICAgICAgIGlucHV0VmFsdWUgPSB0aGlzLmlucHV0VmFsdWUudG9VcHBlckNhc2UoKQogICAgICAgICAgICAgICAgY29kZUNob3NlID0gdGhpcy5jb2RlQ2hvc2UudG9VcHBlckNhc2UoKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHRoaXMuaW5wdXRWYWx1ZQogICAgICAgICAgICAgICAgY29kZUNob3NlID0gdGhpcy5jb2RlQ2hvc2UKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc29sZS5sb2coaW5wdXRWYWx1ZSkKICAgICAgICAgICAgY29uc29sZS5sb2coY29kZUNob3NlKQogICAgICAgICAgICBjb25zb2xlLmxvZyhpbnB1dFZhbHVlID09IGNvZGVDaG9zZSkKCiAgICAgICAgICAgIGlmIChpbnB1dFZhbHVlID09IGNvZGVDaG9zZSkgewogICAgICAgICAgICAgICAgdGhpcy5pc0VuZCA9IHRydWUKICAgICAgICAgICAgICAgIHRoaXMuJHBhcmVudC4kZW1pdCgnc3VjY2VzcycsIHRoaXMpCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLiRwYXJlbnQuJGVtaXQoJ2Vycm9yJywgdGhpcykKICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29kZSgpCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8qKgogICAgICAgICAqIHJlZnJlc2gKICAgICAgICAgKiBAZGVzY3JpcHRpb24g5Yi35pawCiAgICAgICAgICogKi8KICAgICAgICByZWZyZXNoKCkgewogICAgICAgICAgICB0aGlzLmlzRW5kID0gZmFsc2UKICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlID0gJycKICAgICAgICAgICAgdGhpcy5zZXRDb2RlKCkKICAgICAgICB9CiAgICB9LAogICAgd2F0Y2g6IHsKICAgICAgICAvLyB0eXBl5Y+Y5YyW5YiZ5YWo6Z2i5Yi35pawCiAgICAgICAgdHlwZTogewogICAgICAgICAgICBpbW1lZGlhdGU6IHRydWUsCiAgICAgICAgICAgIGhhbmRsZXIoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmluaXQoKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgIG1vdW50ZWQoKSB7CiAgICAgICAgLy8g56aB5q2i5ouW5ou9CiAgICAgICAgdGhpcy4kZWwub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgfQogICAgfSwKICAgIGkxOG46IHsKICAgICAgICBtZXNzYWdlczogewogICAgICAgICAgICAnZW4tVVMnOiB7fSwKICAgICAgICAgICAgJ3poLUNOJzoge30KICAgICAgICB9CiAgICB9Cn0K"},{"version":3,"sources":["VerifyCode.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VerifyCode.vue","sourceRoot":"node_modules/vue2-verify/src/components/Verify","sourcesContent":["<template>\n    <div class=\"cerify-code-panel\">\n        <div class=\"verify-code\"\n             @click=\"setCode\"\n             :style=\"{\n                    'width': width,\n                    'height': height,\n                    'line-height': height,\n                    'font-size': fontSize,\n                    'background-color': containerBackgroundColor,\n                    'color': containerColor\n                }\">\n            <!-- 显示字符串 -->\n            <span :style=\"code.style\" v-for=\"code in codeShow\">\n                {{code.char || code}}\n            </span>\n        </div>\n        <div class=\"verify-code-area\" :style=\"{'width': width}\">\n            <div class=\"verify-input-area\">\n                <input type=\"text\" v-model=\"inputValue\" class=\"varify-input-code\"/>\n            </div>\n            <div class=\"verify-change-area\" @click=\"setCode\"><a class=\"verify-change-code\">换一张</a></div>\n        </div>\n    </div>\n</template>\n<script type=\"text/babel\">\n    /**\n     * Code\n     * @description 常规的图片文字识别或者数字计算\n     * */\n    import {_code_chars, _code_color1, _code_color2} from '../../lib/util'\n\n    export default {\n        name: 'VerifyCode',\n        props: {\n            type: {\n                type: String,\n                default: '1'\n            },\n            //位数，仅在type=2时生效\n            figure: {\n                type: Number,\n                default: 100\n            },\n            //算法，支持加减乘，0为随机，仅在type=2时生效\n            arith: {\n                type: Number,\n                default: 0\n            },\n            width: {\n                type: String,\n                default: '200px'\n            },\n            height: {\n                type: String,\n                default: '60px'\n            },\n            fontSize: {\n                type: String,\n                default: '30px'\n            },\n            codeLength: {\n                type: Number,\n                default: 6\n            }\n        },\n        data() {\n            return {\n                isEnd: false,\n                // 输入的值\n                inputValue: '',\n                // 颜色\n                containerBackgroundColor: '#fff',\n                containerColor: '#fff',\n\n                codeChose: '', // 应该输入的code\n                codeShow: [] // 显示用的\n            }\n        },\n        methods: {\n            init() {\n                this.setCode()\n\n                this.$parent.$emit('ready', this)\n            },\n\n            /**\n             * setCode\n             * @description 设置验证码\n             * */\n            setCode() {\n                if (this.isEnd == false) {\n\n                    this.containerBackgroundColor = _code_color1[Math.floor(Math.random() * 3)]\n                    this.containerColor = _code_color2[Math.floor(Math.random() * 5)]\n\n                    this.inputValue = ''\n\n                    this.codeShow = []\n                    this.codeChose = ''\n\n                    if (this.type === '1') {\t\t//普通验证码 图片选择\n                        for (var i = 0; i < this.codeLength; i++) {\n                            var charNum = Math.floor(Math.random() * 52)\n                            var tmpStyle = (charNum % 2 == 0) ? \"font-style:italic;margin-right: 10px\" : \"font-weight:bolder\"\n                            tmpStyle += (Math.floor(Math.random() * 2) == 1) ? \"font-weight:bolder\" : \"\"\n\n                            this.codeChose += _code_chars[charNum]\n                            this.codeShow.push({\n                                style: tmpStyle,\n                                char: _code_chars[charNum]\n                            })\n                        }\n                    } else if (this.type === '2') {\n                        // 算法验证码\n                        var num1 = Math.floor(Math.random() * this.figure)\n                        var num2 = Math.floor(Math.random() * this.figure)\n\n                        let codeShow = ''\n\n                        if (this.arith == 0) {\n                            var tmparith = Math.floor(Math.random() * 3)\n                        }\n\n                        switch (tmparith) {\n                            case 1 :\n                                this.codeChose = parseInt(num1) + parseInt(num2)\n                                codeShow = num1 + ' + ' + num2 + ' = ?'\n                                break\n                            case 2 :\n                                if (parseInt(num1) < parseInt(num2)) {\n                                    var tmpnum = num1\n                                    num1 = num2\n                                    num2 = tmpnum\n                                }\n                                this.codeChose = parseInt(num1) - parseInt(num2)\n                                codeShow = num1 + ' - ' + num2 + ' = ?'\n                                break\n                            default :\n                                this.codeChose = parseInt(num1) * parseInt(num2)\n                                codeShow = num1 + ' × ' + num2 + ' = ?'\n                                break\n                        }\n\n                        this.codeShow = codeShow.split('') // 转数组\n                    }\n                }\n            },\n            /**\n             * checkCode\n             * @description 验证验证码\n             * */\n            checkCode() {\n                let inputValue\n                let codeChose\n                if (this.type === '1') {\t\t//普通验证码\n                    inputValue = this.inputValue.toUpperCase()\n                    codeChose = this.codeChose.toUpperCase()\n                } else {\n                    inputValue = this.inputValue\n                    codeChose = this.codeChose\n                }\n\n                console.log(inputValue)\n                console.log(codeChose)\n                console.log(inputValue == codeChose)\n\n                if (inputValue == codeChose) {\n                    this.isEnd = true\n                    this.$parent.$emit('success', this)\n                } else {\n                    this.$parent.$emit('error', this)\n                    this.setCode()\n                }\n            },\n            /**\n             * refresh\n             * @description 刷新\n             * */\n            refresh() {\n                this.isEnd = false\n                this.inputValue = ''\n                this.setCode()\n            }\n        },\n        watch: {\n            // type变化则全面刷新\n            type: {\n                immediate: true,\n                handler() {\n                    this.init()\n                }\n            }\n        },\n        mounted() {\n            // 禁止拖拽\n            this.$el.onselectstart = function () {\n                return false\n            }\n        },\n        i18n: {\n            messages: {\n                'en-US': {},\n                'zh-CN': {}\n            }\n        }\n    }\n</script>"]}]}